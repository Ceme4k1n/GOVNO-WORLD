import { Request, Response } from 'express'
import db from '../database/db'
import { io } from '../app'

const dotenv = require('dotenv')
dotenv.config()

export const generate_turn = async () => {
  try {
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.tx(async (t) => {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, —Å–æ—Ä—Ç–∏—Ä—É—è –ø–æ shit_count –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ
      const cities = await t.any('SELECT city_name FROM govno_db.govno_cities ORDER BY shit_count DESC LIMIT 10')

      // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –ø–∞—Ä
      const tournaments: { player1: string; player2: string }[] = []

      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
      for (let i = 0; i < cities.length - 1; i += 2) {
        const player1 = cities[i].city_name
        const player2 = cities[i + 1].city_name

        tournaments.push({ player1, player2 })
      }

      // –ï—Å–ª–∏ –ø–∞—Ä –±–æ–ª—å—à–µ 0, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É —Ç—É—Ä–Ω–∏—Ä–æ–≤
      if (tournaments.length > 0) {
        const tournamentInsertQueries = tournaments.map((tournament) => {
          return t.none('INSERT INTO govno_db.tournaments(player1, player2) VALUES($1, $2)', [tournament.player1, tournament.player2])
        })

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –ø–∞—Ä –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await Promise.all(tournamentInsertQueries)
        console.log('–¢—É—Ä–Ω–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
      } else {
        console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤')
      }
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error)
  }
}

export const get_all_turns = async (req: Request, res: Response) => {
  try {
    const turns = await db.any(`SELECT * FROM govno_db.tournaments`)
    console.log(turns)

    res.status(200).json(turns)
  } catch (error) {
    console.error(error)
    res.status(500).send('Server error')
  }
}

export const user_do_bet = async (req: Request, res: Response) => {
  const { user_id, tournament_id, bet_bool, amount } = req.body

  if (!user_id || !tournament_id || amount == null || bet_bool == null) {
    console.log(`–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –ø–æ–ª—è`)
    res.status(400).send('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞')
  }

  if (amount <= 0) {
    console.log(`–û—à–∏–±–∫–∞: —Å—Ç–∞–≤–∫–∞ –º–µ–Ω—å—à–µ 0`)
    res.status(400).send('‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
  }

  console.log(req.body)

  try {
    await placeBet(user_id, tournament_id, bet_bool, amount)
    res.status(200).send('‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ:', error)
    res.status(500).send(error.message || '‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
  }
}

async function placeBet(user_id: number, tournament_id: number, bet_bool: boolean, amount: number) {
  try {
    await db.tx(async (t) => {
      const tournament = await t.oneOrNone(
        `SELECT total_bets_p1, total_bets_p2, price_p1, price_p2, price_p1_spread, price_p2_spread 
         FROM govno_db.tournaments 
         WHERE id = $1 AND status = 'active'`,
        [tournament_id]
      )

      console.log('–¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', tournament)
      if (!tournament) throw new Error('‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω')

      let totalPull, priceYes, priceNo, stakeYes, stakeNo, voisesAmount

      if (bet_bool) {
        stakeYes = tournament.total_bets_p1 + amount
        stakeNo = tournament.total_bets_p2
      } else {
        stakeYes = tournament.total_bets_p1
        stakeNo = tournament.total_bets_p2 + amount
      }

      totalPull = stakeYes + stakeNo
      priceYes = stakeYes / totalPull
      priceNo = stakeNo / totalPull

      const fairPrice = bet_bool ? tournament.price_p1 : tournament.price_p2
      voisesAmount = amount / (bet_bool ? tournament.price_p1_spread : tournament.price_p2_spread)

      const percentageDifference = Math.abs(priceYes * 100 - priceNo * 100)
      let spread = percentageDifference / 2 / 10

      if (spread > 3) {
        spread = 3
      } else if (spread < 1) {
        spread = 1
      }

      const spreadForLessProb = (2 / 3) * spread
      const spreadForMoreProb = (1 / 3) * spread

      let priceYesWithSpread = priceYes + (stakeYes > stakeNo ? spreadForMoreProb : spreadForLessProb) / 100
      let priceNoWithSpread = priceNo + (stakeYes > stakeNo ? spreadForLessProb : spreadForMoreProb) / 100

      // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      if (priceYesWithSpread >= 0.99) {
        priceYesWithSpread = 0.98
        priceNoWithSpread = 0.03
        priceYes = 0.97
        priceNo = 0.01
      } else if (priceNoWithSpread >= 0.99) {
        priceNoWithSpread = 0.98
        priceYesWithSpread = 0.03
        priceNo = 0.97
        priceYes = 0.01
      }

      if (stakeYes === stakeNo) {
        priceYes = 0.5
        priceNo = 0.5
        priceYesWithSpread = 0.5
        priceNoWithSpread = 0.5
      }

      // üí∞ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
      const totalDisplayedProb = priceYesWithSpread + priceNoWithSpread
      const winProb = bet_bool ? priceYesWithSpread : priceNoWithSpread
      const payoutToWinners = totalPull * (winProb / totalDisplayedProb)
      const platform_profit = totalPull - payoutToWinners

      // –°—Ç–∞—Ä—ã–π user_profit –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å:
      const expectedReturn = voisesAmount * fairPrice
      const user_profit = expectedReturn - amount

      console.log(`–°—É–º–º–∞—Ä–Ω—ã–π –ø—É–ª: ${totalPull}`)
      console.log(`–¶–µ–Ω–∞ "–î–∞" –±–µ–∑ —Å–ø—Ä–µ–¥–∞: ${priceYes.toFixed(2)}`)
      console.log(`–¶–µ–Ω–∞ "–ù–µ—Ç" –±–µ–∑ —Å–ø—Ä–µ–¥–∞: ${priceNo.toFixed(2)}`)
      console.log(`–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç: ${platform_profit.toFixed(2)}`)
      console.log(`–ü–æ—Å–ª–µ –ª–∏–º–∏—Ç–∞: –¶–µ–Ω–∞ "–î–∞": ${priceYes.toFixed(2)}, –¶–µ–Ω–∞ "–ù–µ—Ç": ${priceNo.toFixed(2)}`)
      console.log(`–¶–µ–Ω–∞ "–î–∞" —Å–æ —Å–ø—Ä–µ–¥–æ–º: ${priceYesWithSpread.toFixed(2)}`)
      console.log(`–¶–µ–Ω–∞ "–ù–µ—Ç" —Å–æ —Å–ø—Ä–µ–¥–æ–º: ${priceNoWithSpread.toFixed(2)}`)
      console.log(`–ö–æ–ª-–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤: ${voisesAmount}`)

      await t.none(
        `UPDATE govno_db.tournaments 
         SET total_bets_p1 = $1, total_bets_p2 = $2, price_p1 = $3, price_p2 = $4, 
             price_p1_spread = $5, price_p2_spread = $6, our_profite = our_profite + $7
         WHERE id = $8 AND status = 'active'`,
        [stakeYes, stakeNo, parseFloat(priceYes.toFixed(2)), parseFloat(priceNo.toFixed(2)), parseFloat(priceYesWithSpread.toFixed(2)), parseFloat(priceNoWithSpread.toFixed(2)), parseFloat(platform_profit.toFixed(2)), tournament_id]
      )

      await t.none(
        `INSERT INTO govno_db.bets(user_id, tournament_id, player_bool, amount, price_without_spread, price_with_spread, potential_win, user_profit)
         VALUES($1, $2, $3, $4, $5, $6, $7, $8)`,
        [user_id, tournament_id, bet_bool, amount, fairPrice, bet_bool ? tournament.price_p1_spread : tournament.price_p2_spread, voisesAmount, user_profit]
      )

      io.emit('bet_update', {
        tournament_id,
        total_bets_p1: stakeYes,
        total_bets_p2: stakeNo,
        price_p1_spread: parseFloat(priceYesWithSpread.toFixed(2)),
        price_p2_spread: parseFloat(priceNoWithSpread.toFixed(2)),
      })

      console.log('‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ `placeBet`:', error)
  }
}

export const distributed_cities_and_counries = async () => {
  try {
    await db.tx(async (t) => {
      // –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã, –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
      const ends_id = await t.any(`
        SELECT id, total_bets_p1, total_bets_p2, winning_side, distributed_status
        FROM govno_db.tournaments
        WHERE created_at <= NOW() - INTERVAL '7 days' AND distributed_status = 'no_distributed' AND status = 'finished'
      `)

      console.log(ends_id)

      if (ends_id.length === 0) {
        console.log(`–ù–µ—Ç –∑–∞–∫–æ–Ω—á–∏–≤—à–∏—Ö—Å—è —Ç—É—Ä–Ω–∏—Ä–æ–≤`)
        return
      }

      for (const tournament of ends_id) {
        const winning_side = tournament.winning_side
        const losing_side_total = winning_side ? tournament.total_bets_p2 : tournament.total_bets_p1

        const bets = await t.any(
          `
          SELECT user_id, amount, player_bool, user_profit, created_at
          FROM govno_db.bets
          WHERE tournament_id = $1
        `,
          [tournament.id]
        )

        if (bets.length === 0) {
          console.log(`–ù–µ—Ç —Å—Ç–∞–≤–æ–∫ –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournament.id}`)
          continue
        }

        const winners = bets.filter((bet) => bet.player_bool === winning_side)

        if (winners.length === 0) {
          console.log(`–ù–µ—Ç —Å—Ç–∞–≤–æ–∫ –Ω–∞ –ø–æ–±–µ–¥–∏–≤—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ ${tournament.id}`)
          // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
          for (const bet of bets) {
            await t.none(
              `
              INSERT INTO govno_db.bets_history (
                user_id, tournament_id, player_bool, amount, user_profit, payout, did_win, created_at, finished_at
              )
              VALUES ($1,$2,$3,$4,$5,$6,$7,$8,NOW())
            `,
              [
                bet.user_id,
                tournament.id,
                bet.player_bool,
                bet.amount,
                bet.user_profit,
                0, // payout
                false,
                bet.created_at,
              ]
            )
          }
          continue
        }

        // –ï—Å–ª–∏ –ø—É–ª –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã 0 ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏
        if (losing_side_total <= 1) {
          console.log(`–ü—É–ª –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —Ä–∞–≤–µ–Ω 0 –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournament.id} ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–≤–∫–∏`)
          for (const bet of bets) {
            await t.none(
              `
              UPDATE govno_db.users
              SET balance = balance + $1
              WHERE tg_user_id = $2
            `,
              [parseFloat(bet.amount), bet.user_id]
            )

            await t.none(
              `
              INSERT INTO govno_db.bets_history (
                user_id, tournament_id, player_bool, amount, user_profit, payout, did_win, created_at, finished_at
              )
              VALUES ($1,$2,$3,$4,$5,$6,$7,$8,NOW())
            `,
              [bet.user_id, tournament.id, bet.player_bool, bet.amount, bet.user_profit, parseFloat(bet.amount), bet.player_bool === winning_side, bet.created_at]
            )
          }
          continue
        }

        const winnerCount = winners.length
        const max_payment = losing_side_total / winnerCount
        console.log(`Tournament ID: ${tournament.id}, Max Payment: ${max_payment}`)

        for (const bet of bets) {
          const isWinner = bet.player_bool === winning_side
          const user_profit = parseFloat(bet.user_profit)
          const amount = parseFloat(bet.amount)

          if (isNaN(user_profit)) {
            console.log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –¥–ª—è User ID: ${bet.user_id} –≤ —Ç—É—Ä–Ω–∏—Ä–µ ${tournament.id}`)
            continue
          }

          const payout = isWinner ? Math.min(user_profit, max_payment) : 0

          if (payout > 0) {
            await t.none(
              `
              UPDATE govno_db.users
              SET balance = balance + $1
              WHERE tg_user_id = $2
            `,
              [payout + amount, bet.user_id]
            )
            console.log(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${bet.user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ ${payout}`)
          } else if (isWinner === true && losing_side_total <= 1) {
            // –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω—É–ª–µ–≤–æ–≥–æ –ø—É–ª–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
            await t.none(
              `
              UPDATE govno_db.users
              SET balance = balance + $1
              WHERE tg_user_id = $2
            `,
              [amount, bet.user_id]
            )
          }

          await t.none(
            `
            INSERT INTO govno_db.bets_history (
              user_id, tournament_id, player_bool, amount, user_profit, payout, did_win, created_at, finished_at
            )
            VALUES ($1,$2,$3,$4,$5,$6,$7,$8,NOW())
          `,
            [bet.user_id, tournament.id, bet.player_bool, amount, user_profit, payout, isWinner, bet.created_at]
          )
        }

        await t.none(
          `
          UPDATE govno_db.tournaments
          SET distributed_status = 'distributed'
          WHERE id = $1
        `,
          [tournament.id]
        )

        console.log(`–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${tournament.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`)
      }
    })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ `end_bets`:', error)
  }
}

export const end_cites_and_countries_tours = async () => {
  try {
    const result = await db.result(
      `UPDATE govno_db.tournaments 
       SET status = 'finished' 
       WHERE status = 'active' 
       AND created_at <= NOW() - INTERVAL '7 days'`
    )

    if (result.rowCount > 0) {
      console.log(`üïí –ê–≤—Ç–æ-–∑–∞–≤–µ—Ä—à–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${result.rowCount}, –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ`)
      await distributed_cities_and_counries()
      console.log(`–†–∞—Å—Å—á–∏—Ç–∞–ª –≤—ã–ø–ª–∞—Ç—ã –∏ —Å–¥–µ–ª–∞–ª –∏—Ö`)
      generate_turn()
      console.log(`–°–æ–∑–¥–∞–ª –Ω–æ–≤—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã`)
    } else {
      console.log('üü¢ –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é ‚Äî –ø—Ä–æ–ø—É—Å–∫')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error)
  }
}
