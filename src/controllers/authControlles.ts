import { Request, Response } from 'express'
import crypto from 'crypto'
import db from '../database/db'

const dotenv = require('dotenv')
dotenv.config()

const BOT_TOKEN = process.env.TG_TOKEN || 'test'
const MAX_TIME_DIFF = 300 // 5 –º–∏–Ω—É—Ç
const secretKey = crypto.createHmac('sha256', Buffer.from('WebAppData', 'utf-8')).update(BOT_TOKEN).digest()

export const validate_user = async (req: Request, res: Response) => {
  const { initData, initDataUnsafe } = req.body
  const user_id = initDataUnsafe?.user?.id

  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user_id)

  if (!initData) {
    res.status(403).json({ error: 'initData is required' })
    return
  }

  const validationResult = validateInitData(initData)

  if (validationResult.error) {
    res.status(validationResult.status).json({ error: validationResult.error })
    return
  }

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º last_login + –æ–±–Ω—É–ª—è–µ–º reminder_type –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
    const updatedUser = await db.oneOrNone(
      `
      WITH updated_user AS (
        UPDATE govno_db.users 
        SET last_login = NOW() 
        WHERE tg_user_id = $1 
        RETURNING tg_user_id
      ), updated_reminders AS (
        UPDATE govno_db.reminder_logs 
        SET reminder_type = NULL 
        WHERE user_id = $1
        RETURNING user_id
      )
      SELECT COALESCE((SELECT tg_user_id FROM updated_user), (SELECT tg_user_id FROM govno_db.users WHERE tg_user_id = $1)) AS user_id;
      `,
      [user_id]
    )

    if (!updatedUser || !updatedUser.user_id) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', user_id)
      res.status(200).json({ message: 'User not found' })
      return
    }

    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ –æ–±–Ω–æ–≤–ª—ë–Ω:', user_id)
    res.status(201).json({ message: 'User already exists' })
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error)
    res.status(500).json({ error: 'Database error' })
  }
}

export const user_reg = async (req: Request, res: Response) => {
  const { initDataUnsafe, user_age, user_height, user_weight, user_sex, user_toilet_visits } = req.body
  let { referredId } = req.body
  if (!initDataUnsafe) {
    console.log('–ù–µ—Ç –¥–∞—Ç—ã')
    return
  }
  const user_id = initDataUnsafe.user.id
  const username = initDataUnsafe.user.username
  if (referredId == user_id) {
    referredId = 'None'
  }

  if (user_age && user_height && user_weight && user_toilet_visits) {
    try {
      await db.tx(async (t) => {
        await t.none(
          `INSERT INTO govno_db.users (tg_user_id, username, user_age, user_height, user_weight, user_sex, user_toilet_visits, last_login)
          VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
          ON CONFLICT (tg_user_id) DO NOTHING;`,
          [user_id, username, user_age, user_height, user_weight, user_sex, user_toilet_visits]
        )

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ users
        if (referredId !== 'None') {
          const referredUser = await t.oneOrNone(`SELECT username FROM govno_db.users WHERE tg_user_id = $1`, [referredId])

          if (referredUser) {
            await t.none(
              `INSERT INTO govno_db.referrals (referral_id, friend_id, friend_username, created_at)
              VALUES ($1, $2, $3, NOW())`,
              [referredId, user_id, referredUser.username]
            )
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º –æ—Ç ${referredUser.username ? '@' + referredUser.username : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`)
          } else {
            console.log('–†–µ—Ñ–µ—Ä–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
          }
        } else {
          console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
        }
      })

      res.sendStatus(200)
    } catch (error) {
      console.error(error)
      res.status(501).json({ error: 'Database error' })
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö initData
export const validateInitData = (initData: string) => {
  const params = new URLSearchParams(initData)
  const hash = params.get('hash')

  if (!hash) {
    console.error('‚ùå –û—à–∏–±–∫–∞: hash –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return { error: 'No hash provided', status: 400 }
  }

  console.log('‚úÖ Hash –Ω–∞–π–¥–µ–Ω:', hash)

  params.delete('hash')

  const dataCheckString = Array.from(params.entries())
    .map(([key, value]) => `${key}=${value}`)
    .sort()
    .join('\n')

  const generatedHash = crypto.createHmac('sha256', secretKey).update(dataCheckString).digest('hex')

  console.log('üîç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π hash:', generatedHash)

  if (generatedHash !== hash) {
    console.error('‚ùå –û—à–∏–±–∫–∞: hash –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
    return { error: 'Invalid hash, data might be forged', status: 403 }
  }

  const authDate = parseInt(params.get('auth_date') || '0', 10)
  const currentTime = Math.floor(Date.now() / 1000)

  if (currentTime - authDate > MAX_TIME_DIFF) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ!')
    return { error: 'Data is too old', status: 403 }
  }

  return { success: true }
}
